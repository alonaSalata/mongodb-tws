#!/bin/bash
# ---------------------------------------------------------------------------#
# FILENAME: audit_filter
# PURPOSE : GET / SET audit_filter
# AUTHOR  : EKG
# EMAIL   : DBA-APF-Oracle@system.dvag.com
# ---------------------------------------------------------------------------#

DATUM=$(date +'%Y%m%d_%H%M%S')
LOGFILE="/tws/log/dba/audit_filter_${DATUM}.log"
TMPSTBY="/tws/log/dba/audit_filter_${DATUM}.lst"
CONFFILE="/tws/parms/dba/audit_filter.cfg"
STATUS="OK"


# USAGE
if [[ ("$1" == "get" || "$1" == "set") && ("$2" == "ENT" || "$2" == "ABN" || "$2" == "PRD") ]]; then
                printf ""
else
                echo "======================================="
                echo "============== USAGE =================="
                echo ""
                echo "./audit_filter   get|set    ENT|ABN|PRD"
                echo ""
                echo "======================================="
                exit 0
fi


#Kontrolle ob der Job laeuft..
for pid in $(/sbin/pidof -x audit_filter); do
    if [ $pid != $$ ]; then
        echo "[$(date)] : Job audit_filter laeuft..! PID $pid"
        exit 0
    fi
done

MASK1="%-100s %-9s\n"
MASK2="%-80s%-20s %-9s\n"
MASK3="%-80s%-10s%10s %-9s\n"
MASK4="%-90s%10s %-9s\n"
MASK5="%-40s%10s %-9s\n"
MASK6="%-110s\n"

echo -n > ${LOGFILE}
echo -n > ${TMPSTBY}

LINE="--------------------------------------------------------------------------------------------------------"
echo $LINE | tee -a ${LOGFILE}

function end {
if [ "${STATUS}" == "OK" ]; then
        echo ""  | tee -a ${LOGFILE}
	echo "AUDIT_FILTER **Success**" | tee -a ${LOGFILE}
        # Mailversand mit RC
        echo "Logfile: ${LOGFILE}"
        echo $LINE
        exit 0
else
	echo ""  | tee -a ${LOGFILE}
        echo "AUDIT_FILTER **Failed**" | tee -a ${LOGFILE}
        # Mailversand mit RC
        echo "Logfile: ${LOGFILE}"
        echo $LINE | tee -a ${LOGFILE}
        exit 0
fi
}

echo | tee -a ${LOGFILE}
echo "Validating Configuration File ${CONFFILE}..." | tee -a ${LOGFILE}
if [ ! -s ${CONFFILE} ]; then
                STATUS="NOK"
                printf "%-100s %-20s \n" "Configurationfile not found!" "NOK" | tee -a ${LOGFILE}
                end
else
        proxy="$(egrep -iw ^HTTPS_PROXY ${CONFFILE} | awk -F '=' '{print $2}')"
	api_key="$(egrep -iw ^API_KEY ${CONFFILE} | awk -F '=' '{print $2}')"
	group_id="$(egrep -iw ^${2}_GROUP_ID ${CONFFILE} | awk -F '=' '{print $2}')"
	#abn_group_id="$(egrep -iw ^ABN_GROUP_ID ${CONFFILE} | awk -F '=' '{print $2}')"
	#prd_group_id="$(egrep -iw ^PRD_GROUP_ID ${CONFFILE} | awk -F '=' '{print $2}')"

        declare -a var_names=("proxy" "api_key" "group_id" )
        declare -a var_values=("$proxy" "$api_key" "$group_id" ) 
        number_vars=${#var_names[@]}
        x=0

        while [ $x -lt $number_vars ]; do
                eval param=\${var_values[x]};
                if [ -z "$param" ]; then
                        STATUS="NOK"
                        echo "ERROR: No entry for ${var_names[x]} in the configfile ${CONFFILE}" | tee -a ${LOGFILE}
                        end
                else
			if [[ ${var_names[x]} == "api_key" || ${var_names[x]} == "group_id"  ]]; then
				echo "INFO: ${var_names[x]} : ********" | tee -a ${LOGFILE}
			else
	                        echo "INFO: ${var_names[x]} : ${var_values[x]}" | tee -a ${LOGFILE}
			fi
                fi
                        ((x++))
        done

	export https_proxy=${proxy}
        echo "Validation OK" | tee -a ${LOGFILE}
fi


 echo $LINE | tee -a ${LOGFILE}
 echo "${1}ting audit filter for $2..." | tee -a ${LOGFILE}

if [  "$1" == "get" ]; then


 #CLOUD CONTROL USER NAMESPACES
 command="curl --user ${api_key} \
--digest \
--header \"Accept: application/json\"  \
--silent \
--request GET \"https://cloud.mongodb.com/api/atlas/v1.0/groups/${group_id}/auditLog?pretty=true\" "

 #echo "${command}"

 eval ${command} | tee -a ${LOGFILE}

 if [ "$?" != "0" ]; then
	STATUS="NOK"
 fi

 end
fi


if [  "$1" == "set" ]; then
 #CLOUD CONTROL GET USERS
 command="curl --user ${api_key} \
--digest      \
--header \"Accept: application/json\"      \
--header \"Content-Type: application/json\"  \     
--include      \
--request GET \"https://cloud.mongodb.com/api/atlas/v1.0/groups/${group_id}/databaseUsers?pretty=true\" --silent|egrep -e 'username'|egrep -e 'VAU|KDSCHUL01|reporting|powerBI' |awk -F\"    \\\"username\\\" : \" '{print \"\\t\"\$2}'|tr '\n' ' '"

 #echo "${command}"
 data1='"{\n  \"$and\": [\n    {\n      \"roles\": {\n        \"$elemMatch\": {\n          \"role\": {\n            \"$ne\": \"__system\"\n          }\n        }\n      }\n    },\n    {\n      \"users.user\": {\n        \"$not\": {\n          \"$in\": [\n           '

 eval ${command} > ${TMPSTBY}

 printf "\\t\"mms-automation\"," >>${TMPSTBY}
 printf "\\t\"mms-monitoring-agent\"" >>${TMPSTBY}
 sed -i 's/"/\\\"/g' ${TMPSTBY}
 sed -i 's/,/,\\n/g' ${TMPSTBY}
 
 data2=`cat ${TMPSTBY}`

 #cat ${TMPSTBY}
 data3='\n          ]\n        }\n      }\n    },\n    {\n      \"param.command\": {\n        \"$not\": {\n          \"$in\": [\n            \"getMore\",\n            \"ping\",\n            \"getnonce\",\n            \"ismaster\",\n            \"getShardVersion\",\n            \"_isSelf\",\n            \"collstats\",\n            \"serverStatus\",\n            \"getCmdLineOpts\",\n            \"connPoolStats\",\n            \"getLog\"\n          ]\n        }\n      }\n    },\n    {\n      \"param.ns\": {\n        \"$not\": {\n          \"$in\": [\n            \"local.oplog.rs\",\n            \"local.system.replset\",\n            \"config.settings\"\n          ]\n        }\n      }\n    },\n    {\n      \"$or\": [\n        {\n          \"atype\": {\n            \"$in\": [\n              \"authenticate\",\n              \"createCollection\",\n              \"createDatabase\",\n              \"createIndex\",\n              \"renameCollection\",\n              \"dropDatabase\",\n              \"dropCollection\",\n              \"dropIndex\",\n              \"createUser\",\n              \"dropUser\",\n              \"dropAllUsersFromDatabase\",\n              \"updateUser\",\n              \"grantRolesToUser\",\n              \"revokeRolesFromUser\",\n              \"createRole\",\n              \"updateRole\",\n              \"dropRole\",\n              \"dropAllRolesFromDatabase\",\n              \"grantRolesToRole\",\n              \"revokeRolesFromRole\",\n              \"grantPrivilegesToRole\",\n              \"revokePrivilegesFromRole\",\n              \"replSetReconfig\",\n              \"shutdown\",\n              \"applicationMessage\"\n            ]\n          }\n        },\n        {\n          \"param.command\": {\n            \"$in\": [\n              \"find\",\n              \"insert\",\n              \"delete\",\n              \"update\",\n              \"findandmodify\"\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}"' 

 #cat ${TMPSTBY}

 audit_filter=${data1}${data2}${data3}

 #echo "${audit_filter}"

 data="{ \
   \"auditAuthorizationSuccess\": true, \
   \"auditFilter\": ${audit_filter}, \
   \"enabled\": true \
} \
"



 command="curl --user ${api_key} --digest      \
--header \"Accept: application/json\"      \
--header \"Content-Type: application/json\"       \
--request PATCH \"https://cloud.mongodb.com/api/atlas/v1.0/groups/${group_id}/auditLog?pretty=true\"  \
--data '${data}'
"

 #echo "${command}"

 eval ${command}| tee -a ${LOGFILE}
 if [ "$?" != "0" ]; then
        STATUS="NOK"
 fi
################
end
fi

