#!/bin/bash
# ---------------------------------------------------------------------------#
# FILENAME: profiler
# PURPOSE : gather slowqueries in Collection
# AUTHOR  : EKG
# EMAIL   : DBA-APF-Oracle@system.dvag.com
# ---------------------------------------------------------------------------#


printValue()
{
  section="$1"
  SECTION=${section^^}
  param="$2"
  PARAM=${param^^}
  found=false
  while read line
  do
    LINE=${line^^}
    [[ $found == false && "$LINE" != "[$SECTION]" ]] &&  continue
    [[ $found == true && "${LINE:0:1}" = '[' ]] && break
    found=true
    [[ "${LINE%=*}" == "${PARAM}" ]] && { echo "${line#*=}"; break; }
  done
}

printSection()
{
  section="$1"
  SECTION=${section^^}
  found=false
  while read line
  do
    LINE=${line^^}
    [[ $found == false && "$LINE" != "[$SECTION]" ]] &&  continue
    [[ $found == true && "${LINE:0:1}" = '[' ]] && break
    found=true
    echo "$line"
  done
}


DATUM=$(date +'%Y%m%d_%H%M%S')
MONGO_DATE=$(date +'%Y%m%d %H%M%S')
LOGFILE="/tws/log/dba/profiler_${DATUM}.log"
TMPSTBY="/tws/log/dba/profiler_${DATUM}.lst"
JSFILE=/tws/log/dba/profiler_${DATUM}.js
SORTFILE=/tws/log/dba/profiler_${DATUM}.txt
DOCUMENT_FILE=/tws/log/dba/profiler_${DATUM}.doc
CONFFILE="/tws/parms/dba/profiler.cfg"
STATUS="OK"


# USAGE
if [[ ("$1" == "load" ) && ("$2" == "ENT" || "$2" == "ABN" || "$2" == "PRD") ]]; then
                printf ""
else
                echo "============================================="
                echo "============== USAGE ========================"
                echo ""
                echo "./profiler   load  ENT|ABN|PRD"
                echo ""
                echo "============================================="
                exit 0
fi


#Kontrolle ob der Job laeuft..
pid_count=`pgrep -a "profiler"|grep "$2"|awk '{print $1}'|wc -l`
#echo "${pid_count}"
if [ "${pid_count}" -gt "2" ]; then
        echo "[$(date)] : Job profiler gerade laeuft..!"
        exit 0
fi

MASK1="%-100s %-9s\n"
MASK2="%-80s%-20s %-9s\n"
MASK3="%-80s%-10s%10s %-9s\n"
MASK4="%-90s%10s %-9s\n"
MASK5="%-40s%10s %-9s\n"
MASK6="%-110s\n"

echo -n > ${LOGFILE}
echo -n > ${TMPSTBY}

LINE="--------------------------------------------------------------------------------------------------------"
echo $LINE | tee -a ${LOGFILE}

function end {
if [ "${STATUS}" == "OK" ]; then
        echo ""  | tee -a ${LOGFILE}
	echo "Profiler **Success**" | tee -a ${LOGFILE}
        # Mailversand mit RC
        echo "Logfile: ${LOGFILE}"
        echo $LINE
        exit 0
else
	echo ""  | tee -a ${LOGFILE}
        echo "Profiler **Failed**" | tee -a ${LOGFILE}
	cat ${LOGFILE}  | mail -s "Profiler **Failed**"  DBA-APF-Oracle@dvag.com,alona.salata@dvag.com
        # Mailversand mit RC
        echo "Logfile: ${LOGFILE}"
        echo $LINE | tee -a ${LOGFILE}
        exit 1
fi
}


echo | tee -a ${LOGFILE}
echo "Validating Configuration File ${CONFFILE}..." | tee -a ${LOGFILE}
if [ ! -s ${CONFFILE} ]; then
                STATUS="NOK"
                printf "%-100s %-20s \n" "Configurationfile not found!" "NOK" | tee -a ${LOGFILE}
                end
else

	projectname="$2"
        proxy="$(egrep -iw ^HTTPS_PROXY ${CONFFILE} | awk -F '=' '{print $2}')"
	api_key="$(egrep -iw ^API_KEY ${CONFFILE} | awk -F '=' '{print $2}')"
	group_id="$(egrep -iw ^${projectname}_GROUP_ID ${CONFFILE} | awk -F '=' '{print $2}')"
	mongo_server=$(egrep -iw ^MONGO_SERVER ${CONFFILE} | awk -F '=' '{print $2}')
	mongo_user=$(egrep -iw ^MONGO_USER ${CONFFILE} | awk -F '=' '{print $2}')
	projectname_lower=${projectname,,}
	password_file=$(egrep -iw ^PASSWORD_FILE ${CONFFILE} | awk -F '=' '{print $2}'|sed "s/##projectname##/${projectname_lower}/g")
	#echo $password_file
	last_upload_time=$(egrep -iw ^${projectname}_LAST_UPLOAD_TIME ${CONFFILE} | awk -F '=' '{print $2}'|sed "s/'//g")
	namespace=$(date +'%Y%m')
	collection=$(date +'%d')


        declare -a var_names=("proxy" "api_key" "group_id" "projectname" "mongo_server" "mongo_user" "password_file" "last_upload_time" "namespace" "collection" )
        declare -a var_values=("$proxy" "$api_key" "$group_id" "$projectname" "$mongo_server" "$mongo_user" "$password_file" "$last_upload_time" "$namespace" "$collection" ) 
        number_vars=${#var_names[@]}
        x=0

        while [ $x -lt $number_vars ]; do
                eval param=\${var_values[x]};
                if [ -z "$param" ]; then
                        STATUS="NOK"
                        echo "ERROR: No entry for ${var_names[x]} in the configfile ${CONFFILE}" | tee -a ${LOGFILE}
                        end
                else
			if [[ ${var_names[x]} == "api_key" || ${var_names[x]} == "group_id"  ]]; then
				echo "INFO: ${var_names[x]} : ********" | tee -a ${LOGFILE}
			else
	                        echo "INFO: ${var_names[x]} : ${var_values[x]}" | tee -a ${LOGFILE}
			fi
                fi
                        ((x++))
        done

	export https_proxy=${proxy}
        echo "Validation OK" | tee -a ${LOGFILE}
fi


password=`cat ${password_file}`
last_upload_milliseconds=$(date -d "${last_upload_time}" +%s%3N)

#echo $last_upload_milliseconds

#echo ${password}
if [ "$1" == "load" ]; then
 echo $LINE | tee -a ${LOGFILE}
 echo "Loading ${2} SlowQueries in Namespace : ${namespace} , Collection : ${collection} ..." | tee -a ${LOGFILE}

 command="curl --user ${api_key} --digest      \
--include     --silent  \
--request GET \"https://cloud.mongodb.com/api/atlas/v1.0/groups/${group_id}/clusters?pretty=true\"|grep \"mongoURIWithOptions\"
"

 #echo "${command}"

 eval ${command}>${TMPSTBY}
 #cat ${TMPSTBY}
 clusters=""
 while read line; do
 	IFS=',' read -ra ADDR <<< "${line}"
	for cluster in "${ADDR[@]}"; do
        	#echo ${cluster}
 	        cluster1=`echo $cluster|sed 's/"mongoURIWithOptions" : "mongodb:\/\///g'`
		control=`echo $cluster1|grep -i "ssl"|wc -l`
		if [ "$control" != "0" ]; then
			cluster1=`echo $cluster1|awk -F'/' '{print $1}'`
		fi
		#echo $cluster1
        	clusters=${clusters}${cluster1}","
	done
 done < ${TMPSTBY}

 echo "Clusters : ${clusters} in ${2} Environment"|tee -a ${LOGFILE} 

 echo -n > ${TMPSTBY}
 IFS=',' read -ra ADDR <<< "${clusters}"
 for cluster in "${ADDR[@]}"; do
  if [ "$cluster" == "" ]; then
	continue
  fi

  #echo $cluster 

  new_last_upload_time=`date '+%Y%m%d %H:%M:%S'`  

  command="curl   --user  ${api_key}  --digest  -i  --silent  \
 --header \"Accept: application/json\"            \
 --request GET \"https://cloud.mongodb.com/api/atlas/v1.0/groups/${group_id}/processes/${cluster}/performanceAdvisor/slowQueryLogs?since=${last_upload_milliseconds}&pretty=true\"|egrep -e 'line|namespace'"

  #echo ${command}
  eval ${command}> ${TMPSTBY}

  sed -i 's/"{/{/g' ${TMPSTBY}
  sed -i 's/}"/}/g' ${TMPSTBY}
  sed -i 's/\\//g'  ${TMPSTBY}
  #echo ${TMPSTBY}

  document="{ "
  while read line; do
	document="${document}""${line}"
	if [ -n "$(echo ${line}|grep namespace)" ]; then 
		document="${document},\"insertdate\":\"${MONGO_DATE}\"}"
		expr_replace=$(echo $document|jq '[.line]')
		#echo ${expr_replace}
		echo "${document}">${SORTFILE}
		#cat ${SORTFILE}

		#make ARRAY line
		jq -r --arg newval "${expr_replace}" '.line|=$newval' ${SORTFILE} > ${DOCUMENT_FILE}
		
		cat ${DOCUMENT_FILE}>${SORTFILE}
		sed -i 's/\"\[/\[/g' ${SORTFILE}
		sed -i 's/\]\"/\]/g' ${SORTFILE}
		sed -i 's/\\n//g' ${SORTFILE}
		sed -i 's/\\//g' ${SORTFILE}
		#cat ${SORTFILE}

		#make ARRAY attr
		expr_replace=$(echo $document|jq '[.line.attr]')
		#echo "${expr_replace}"
		jq -r --arg newval "${expr_replace}" '.line[].attr|=$newval' ${SORTFILE} > ${DOCUMENT_FILE}

                cat ${DOCUMENT_FILE}>${SORTFILE}
		sed -i 's/\"\[/\[/g' ${SORTFILE}
                sed -i 's/\]\"/\]/g' ${SORTFILE}
                sed -i 's/\\n//g' ${SORTFILE}
                sed -i 's/\\//g' ${SORTFILE}
                #cat ${SORTFILE}

		#make ARRAY command
		expr_replace=$(echo $document|jq '[.line.attr.command]')
		#echo "${expr_replace}"
		jq --arg newval "${expr_replace}" '.line[].attr[].command|=$newval' ${SORTFILE} > ${DOCUMENT_FILE}

                cat ${DOCUMENT_FILE}>${SORTFILE}
		sed -i 's/\"\[/\[/g' ${SORTFILE}
                sed -i 's/\]\"/\]/g' ${SORTFILE}
                sed -i 's/\\n//g' ${SORTFILE}
                sed -i 's/\\//g' ${SORTFILE}
                #cat ${SORTFILE}

		#make ARRAY locks
		expr_replace=$(echo $document|jq '[.line.attr.locks]')
                jq --arg newval "${expr_replace}" '.line[].attr[].locks|=$newval' ${SORTFILE} > ${DOCUMENT_FILE}

                cat ${DOCUMENT_FILE}>${SORTFILE}
		sed -i 's/\"\[/\[/g' ${SORTFILE}
                sed -i 's/\]\"/\]/g' ${SORTFILE}
                sed -i 's/\\n//g' ${SORTFILE}
                sed -i 's/\\//g' ${SORTFILE}
                #cat ${SORTFILE}


		#make ARRAY writeConcern
		expr_replace=$(echo $document|jq '[.line.attr.writeConcern]')
                jq --arg newval "${expr_replace}" '.line[].attr[].writeConcern|=$newval' ${SORTFILE} > ${DOCUMENT_FILE}

                cat ${DOCUMENT_FILE}>${SORTFILE}
	
		#cat ${SORTFILE}
		namespace_new=${namespace}_`echo ${cluster}|awk -F"-shard" '{print $1}'`

		#echo ${namespace_new}

		cat > ${JSFILE}  << EOF
use ${namespace_new};

db.runCommand(
		   {
		      insert: "${collection}",
		      documents: [

EOF
		cat ${SORTFILE}>>${JSFILE}

		cat >> ${JSFILE}  << EOF2
		      ],
		      ordered: false,
		      writeConcern: { w: "majority", wtimeout: 5000 }
		   }
		);		
		
exit;
EOF2
		command=`cat ${JSFILE}`
		#cat ${JSFILE}
		mongo 'mongodb+srv://restoretest-pl-0.8p72b.mongodb.net'  --username ${mongo_user} --password ${password} --quiet > /dev/null << -EOF3
${command}
quit();
-EOF3

		if [ "$?" != "0" ]; then
		      echo $LINE | tee -a ${LOGFILE}
		      echo "**FAILED** to insert"| tee -a ${LOGFILE}
		      echo $LINE | tee -a ${LOGFILE}
		      echo ${command}|tee -a ${LOGFILE}	      
		      #echo 3
		      STATUS="NOK"
		fi

		printf "."|tee -a ${LOGFILE}

		document="{"
	fi
  done < <(egrep -e 'line|namespace' ${TMPSTBY})
 done
 #update last_upload_time in Config
 sed -i "s/${projectname}_LAST_UPLOAD_TIME='${last_upload_time}'/${projectname}_LAST_UPLOAD_TIME='${new_last_upload_time}'/g" ${CONFFILE}
fi

################

rm -f ${JSFILE}
rm -f ${SORTFILE}
rm -f ${TMPSTBY}
rm -f ${DOCUMENT_FILE}

end
